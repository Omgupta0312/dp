#include<bits/stdc++.h>
bool helper(int i,int j,string &s,string &t,vector<vector<int>>&dp)
{
    if(i==0 && j==0) return true;
    if(i==0 && j>0) return false;
    if(i>0 && j==0) {
        for(int x=1;x<=i;x++)
            if(s[x-1]!='*')
                return false;
        return true;
    }
    if(dp[i][j]!=-1) return dp[i][j];
    if(s[i-1]==t[j-1] || s[i-1]=='?')
        return dp[i][j] = helper(i-1,j-1,s,t,dp);
    else if(s[i-1]=='*')
        return dp[i][j] = helper(i-1,j,s,t,dp) || helper(i,j-1,s,t,dp);
    else 
        return dp[i][j] = false;
}
bool wildcardMatching(string pattern, string text)
{
    int n=pattern.size();
    int m=text.size();
//     vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
//     return helper(n,m,pattern,text,dp)>0?true:false;
    
    string s= pattern,t=text;
//     vector<vector<bool>> dp(n+1,vector<bool>(m+1,0));
//     dp[0][0]=1;
//     for(int j=1;j<m+1;j++)
//         dp[0][j]=false;
//     for(int i=1;i<=n;i++)
//     {
//          bool flag = true;
//          for(int x=1;x<=i;x++)
//             if(pattern[x-1]!='*')
//             {
//                 flag=false;break;
//             }
//         dp[i][0]=flag;
//     }
    
//     for(int i=1;i<=n;i++)
//     {
//         for(int j=1;j<=m;j++)
//         {
//             if(s[i-1]==t[j-1] || s[i-1]=='?')
//                 dp[i][j] = dp[i-1][j-1];
//             else if(s[i-1]=='*')
//                 dp[i][j] = dp[i-1][j] || dp[i][j-1];
//             else 
//                 dp[i][j] = false;
//         }
//     }
//     return dp[n][m];
    
    vector<bool> prev(m+1,0);
    prev[0]=1;
    
    for(int i=1;i<=n;i++)
    { 
         vector<bool> curr(m+1,0);
         bool flag = true;
         for(int x=1;x<=i;x++)
            if(s[x-1]!='*'){
                flag=false;break;
            }
         curr[0]=flag;
        
        for(int j=1;j<=m;j++)
        {
            if(s[i-1]==t[j-1] || s[i-1]=='?')
                curr[j] = prev[j-1];
            else if(s[i-1]=='*')
                curr[j] = prev[j] || curr[j-1];
            else 
                curr[j] = false;
        }
        prev=curr;
    }
    return prev[m];
    
    
}
