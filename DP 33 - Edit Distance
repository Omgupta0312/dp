#include <bits/stdc++.h>
int helper(string &s, string &t, int i, int j, vector<vector<int>> &dp) {
  if (i == 0)
    return j;
  if (j == 0)
    return i;
  if (dp[i][j] != -1)
    return dp[i][j];
  if (s[i - 1] == t[j - 1])
    return dp[i][j] = helper(s, t, i - 1, j - 1, dp);
  else {
    return dp[i][j] = min(1 + helper(s, t, i, j - 1, dp),
                          min(1 + helper(s, t, i - 1, j, dp),
                              1 + helper(s, t, i - 1, j - 1, dp)));
  }
}
int editDistance(string &s, string &t) {
  int n = s.size(), m = t.size();
  vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
  for (int j = 0; j <= t.size(); j++)
    dp[0][j] = j;
  for (int i = 0; i <= s.size(); i++)
    dp[i][0] = i;

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      if (s[i - 1] == t[j - 1])
        dp[i][j] = dp[i - 1][j - 1];
      else
        dp[i][j] = 1 + min(dp[i][j - 1], min(dp[i - 1][j], dp[i - 1][j - 1]));
    }
  }
  return dp[n][m];
}
