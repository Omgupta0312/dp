//link : https://www.codingninjas.com/codestudio/problems/triangle_1229398?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos
#include<bits/stdc++.h>
// *************MEMORISATION APPROACH:*************
// int helper(vector<vector<int>>& ta,int i,int j,vector<vector<int>>& dp)
// {
//     int n=ta.size();
//     if(i>=n|| j>=ta[i].size()) return INT_MAX;
//     if(i==n-1) return ta[i][j];
//     if(dp[i][j]!=-1) return dp[i][j];
   
//     return dp[i][j]=ta[i][j]+min(helper(ta,i+1,j,dp),helper(ta,i+1,j+1,dp));
// }


// *************TABULATION APPROACH*************
// int minimumPathSum(vector<vector<int>>& triangle, int n){
// vector<vector<int>>dp(triangle.size(),vector<int>(triangle.back().size(),-1));
//     for(int j=0;j<triangle.back().size();j++)
//         dp[triangle.size()-1][j]=triangle[triangle.size()-1][j];
    
    
//     for(int i=triangle.size()-2;i>=0;i--)
//     {
//         for(int j=0;j<triangle[i].size();j++)
//         {
//             dp[i][j]=triangle[i][j]+min(dp[i+1][j],dp[i+1][j+1]);
//         }
//     }
  
//     return dp[0][0];
// }

// **********SPACE OPTIMISED****************
int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<int>dp(triangle.back().size(),-1);
    
    for(int j=0;j<triangle.back().size();j++)
        dp[j]=triangle[triangle.size()-1][j];
    
    
    for(int i=triangle.size()-2;i>=0;i--)
    {
        vector<int>temp(triangle[i].size(),0);
        for(int j=0;j<triangle[i].size();j++)
            temp[j]=triangle[i][j]+min(dp[j],dp[j+1]);
        dp=temp;
    }
  
    return dp[0];
}
